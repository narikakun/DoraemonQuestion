let nowData=null,showListMode=!1;function getBoard(o,t=1){$("#cardList").html(" "),(showListMode=$.cookie("listMode")?!0:showListMode)||($("#cardList").attr("class","row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3 mt-3"),$("#modeChangeButton").text("カード切り替え")),$("#cardList").hide(),$.ajax({type:"GET",url:`/api/board/${o}/list?page=`+t,contentType:"application/json",dataType:"json"}).done(async function(t,a,e){t.boards.reverse(),await boardRefresh(t),nowData=t,await connectWebSocket(o),1==t.pageNumber?$("#paginationBack").addClass("disabled"):$("#paginationBack").removeClass("disabled"),t.pageNumber==t.maxPage?$("#paginationNext").addClass("disabled"):$("#paginationNext").removeClass("disabled"),$("#paginationInfo").text(`　${t.pageNumber} / ${t.maxPage}　`)}).fail(function(t,a,e){$("#errorMsg").text(t.responseJSON.msg)})}async function modeChange(){$("#modeChangeButton").hide(),$("#cardList").html(" "),showListMode?($.cookie("listMode",""),$("#cardList").attr("class","row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3 mt-3"),showListMode=!1,$("#modeChangeButton").text("カード切り替え")):($.cookie("listMode","true"),$("#cardList").attr("class","mt-3"),showListMode=!0,$("#modeChangeButton").text("リスト切り替え")),await boardRefresh(nowData),$("#modeChangeButton").show()}async function boardRefresh(t){if(showListMode)await showBoardList(t.boards);else for(const a of t.boards)await addBoard(a);$("#cardList").show(),setTimeout(()=>$("#cardList .card").matchHeight(),100)}async function showBoardList(t){let a="";a+=`<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">投稿者名</th>
            <th scope="col">タイトル</th>
            <th scope="col">内容</th>
            <th scope="col">日付</th>
        </tr>
    </thead>
  <tbody>`;var e=Object.keys(t).reverse();for(const s in e){var o=t[e[s]];a+=`
        <tr id="board_${o._id}" onclick="window.location.href='/class/${o.classId}/board/${o._id}'">
                <td>${escapeHTML(o.author)}</td>
                <td>${escapeHTML(o.data.title||"タイトル無し")}</td>
                <td>${escapeHTML(truncateString(o.data.content,30)||"")}</td>
                <td>${new Date(o.createdAt).toLocaleString("ja")}</td>
        </tr>`}a+="</tbody></table>",$("#cardList").html(a)}async function addBoard(t){let a="";a+=`
<div class="col d-flex" id="board_${t._id}">
<div class="card mb-3 card-link flex-grow-1" onclick="window.location.href='/class/${t.classId}/board/${t._id}'">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center">
            <h6 class="card-subtitle mb-2 text-muted">${escapeHTML(t.author)}</h6>
            <small class="text-muted">${new Date(t.createdAt).toLocaleString("ja")}</small>
        </div>
        <h5 class="card-title mb-0">${escapeHTML(t.data.title||"タイトル無し")}</h5>
        <hr>
        <p class="card-text">${escapeHTML(truncateString(t.data.content,70)||"")}</p>
        <div class="row row-cols-3 g-3">`;for(const o of t.data.files){var e;["image/jpeg","image/jpg","image/png"].includes(o.mimetype)&&(a+=`<div class="col"><img src="/uploads${o.resize||o.key}" class="img-fluid"></div>`),"application/pdf"==o.mimetype&&(e=o.pdf[Object.keys(o.pdf)[0]],a+=`<div class="col"><img src="/uploads${e.resize||e.image}" class="img-fluid"></div>`)}a+=`
        </div>
    </div>
    <div id="board_comment_${t._id}">`,t.lastComment&&(a+=`<div class="card-footer">
        <div class="comment d-flex justify-content-between align-items-center">
            <span><strong>${escapeHTML(t.lastComment.author)}</strong> ${escapeHTML(truncateString(t.lastComment.data.content,15)||"")}</span>
            <span class="badge bg-secondary"><span id="board_comment_${t._id}_commentCounter">${t.lastComment.commentCount}</span> コメント</span>
        </div>
</div>`),a+=`</div>
    </div>
    </div>`,$("#cardList").html(a+$("#cardList").html()),$("#cardList .card").matchHeight()}async function connectWebSocket(t){var a=new WebSocket(wsUrl+"/ws/connect/"+t);a.onmessage=function(t){let s=JSON.parse(t.data);if(console.log(s),"postComment"===s.type){let o=$("#board_"+s.data.boardId);if(o){let e=$("#board_comment_"+s.data.boardId);e&&o.fadeOut("fast",function(){var t=$(`#board_comment_${s.data.boardId}_commentCounter`);let a=1;t&&(a=Number(t.text())+1),e.html(`<div class="card-footer">
                    <div class="comment d-flex justify-content-between align-items-center">
                        <span><strong>${s.data.author}</strong> ${escapeHTML(truncateString(s.data.data.content,15)||"")}</span>
                        <span class="badge bg-success" id="board_comment_${s.data.boardId}_commentCounter">${a} コメント</span>
                    </div>`),$("#cardList .card").matchHeight(),o.fadeIn("fast")})}}else"createBoard"===s.type?addBoard(s.data):"removeBoard"==s.type&&(t=$("#board_"+s.boardId))&&t.remove()},a.onclose=function(){bootstrap.showToast({body:"サーバーから切断されました。再接続します。",toastClass:"text-bg-danger"}),setTimeout(()=>{connectWebSocket(t)},5e3)}}$(function(){$("#paginationBack").click(function(t){var a;nowData.pageNumber<=1||(a=nowData.pageNumber-1,getBoard(nowData.classId,a))}),$("#paginationNext").click(function(t){var a;nowData.maxPage<=nowData.pageNumber||(a=nowData.pageNumber+1,getBoard(nowData.classId,a))})});